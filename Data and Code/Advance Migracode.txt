Advanced (kinda) Migracode

HTTP PROTOCOL, rules communication between, request response.
req, res, .PUT/DELETE/POST and stuff

API, (Aplication Programming Interface)

ok so, express as framework Node.js, backend, simplified features
Dependencies (packatage.json), 
npm (Node Package Manager) 
Building a server to test backend, Computer programs, receive Request by clients
and send response (Data)

Importing / requesting, using its methods, functionlity of library and module (re-usable code)

(to check the name go to the package json file)
var express = require('_____');

Call a function express (we set before)
"listening", setting the endpoint (numeric) from where request will come.
server is rnning (adress?)
we can set the endpoint in the arguments.

callback funtion (as first action from the working server)

to run the server, (node keyword ?)

handler functions: to respond request, 
request and response as OBJECTS, (with properties, mathods)
=/= variables, name:value pairs 

get() [method define handler functions] 2 PARAMETERS

remember ending with comma (even if not)

ok so, differences between console.log / res.send
the first will appear only in the terminal line of the server 
will the other will be expresses in the localhost:3000

routing, multiple endpoints, from which to send responses.

"/second" [settig the second endpoint (which will be after the first on e n "/")]

static assets, files that doesnt change from how is stored in the server to deivery to clients.

serving assets from public folders with:
	app.use(express.static("public"));

ok so the:
	function (req, res) {
	    res.send("Hello World!");
	}

can be used to send messages but for static files:

	app.use(express.static("public"));

HTTP methods, GET,PUT, POST, DELETE.

ok so, when used from the html we set them as "method="POST"
action = "/create-post" (where the data will be sent after yhe action (button))
name (attribute) to reference the data.

ok so, from the method ="POST" we set a response on the server.

	app.post( "/create-post", function(req,res){
	    console.log("text");
	})

ok so, with this we just set an anwser for the endpoint "/create-post" (the "text")
to access the data we moved.
consol.log(req.body) (we would get undefined in the server, the data is still as formdata)

middleware functions like express-formidable to extract from the formData

after setting the require you activate (use) it in:

	app.use(formidable());

with the key {blogppost: "inserted text"}

JSON for structuring data, to send data across.

ok so, passing from Json to javascript and vice with
JSON.parse()   JSON.stringify()

ok so, data passing trought the server, save in hard disk, fs (file-system / module)
method to write in the hard drive will be:

	fs.writeFile('location-of-your-file-goes-here', yourData, function (error) {
    	// do something
	});

ok so, to read data, the callback function has the second argument (the file being read)

	fs.readFile(__dirname + '/data/posts.json', function (error, file) {
	    console.log(file);
	});

ok so, __dirname (Node global object) path to the directory

buffer format Buffer: 7b 0a 20 20 20 20 22 31 34 36 37 33 39 30 33 35 36 32 39 31 22 3a 20 22 54
to readable:
	just file.toString()

--------------------




ok so postSQL, database, 
Data, structured, store, retieve organize.
now we were doing with files, but now not only static but updates avaiable
also structured for different types of data.
like relational databases, key/value, graph databases, document database (NoSQL)
relational databases, Object-relational database system
scale data workloads, (Structured Query Language)
PostgreSQL is a RDBMS, Relational Database Management System.
Data stored in matrix, 2 dimensions arrays.

port number of of server, 
stored and modaled, TABLES.


*39wZg8TLY*q passwords
5432